Chapter03 データベース操作の基本

3-1 SQLとは
              SQL：データベースに命令する『問い合わせ』言語
               ↓  →操作により、3種類（DML、DDL、DCL）に大別される。
・人間         ↓                  ↓
・プログラム→(指示)→DBMS  →  （操作）→データベース
  (Javaなど）  ↑
               ↑
              SQL文の発行
                   ・書き方は『標準化』されている。
                     →DBMSにより方言はあるものの、他のDBMSでも
                       おおむね同じ書き方になる。

【SQL文の書き方】
 ①命令は1行で1つを表し、文の終わりはセミコロンを付ける。
         ↑
   見た目ではなく、意味的に判断される！
   →見やすいように適当に開業しても、最後にセミコロンを付けると
     1行とみなされる。

 ②SQL文は命令語から始まる。
 [例]SELECT文の基本構文
               識別子（定数）：データベース（DB)管理者が決める項目
                 や          （DB名、テーブル名、カラム名 など）
               リテラル（変数）：カラムに格納される個別のデータ
             ↓         ↓（※大文字・小文字の区別あり）
             ↓         ↓
     SELECT name FROM jusho; ←構成要素は必ず子の並び方とは限らない！
       ↑        ↑    ↑     [例]INSERT INTO … VALUES …;  [p.071]
      命令  キーワード セミコロンで終える

※ SQL文の構成要素は『空白』で区切ること！
   →命令語と識別子（リテラル）、キーワードと識別子（リテラル）をそれぞれ
     まとめて『句』とよぶ。
    [例]SELECT句、FROM句など

 ③命令語やキーワードは、識別子には使用できない！
         ↑
   予約語として登録済み！
   
   なお、大文字と小文字は区別されないが、学習段階では予約語を意識するために
   区別することをお勧めする。→[訓練]テキストの記述を採用
   
   MySQLの特徴として、バッククォート（‵）で囲むと予約語を識別子に使用する
   ことができる。
   が、他のDBMSでは効果がない場合があるので、極力使用を控えるほうが良い。
   
 ④文字列系（含：日付）リテラルは、（一重・二重）引用符で囲む必要があるが、
   数    値            リテラルは、                      囲む必要がない！
   
   ※データの種類（データ型）については、第4章で取り扱う！
     引用符に関しては、他のDBMSとの互換性を考えると、一重引用符をお勧めする[p.107]
   
【SQLの分類】
・データ操作言語（DML)：データを操作する言語。使用頻度がもっとも高い！
        Manipulation    アプリから間接的な利用以外では、動作テストの不具合の
                        原因追求などで、直接問い合わせる際に使用する。
        命令の種類は4つ！データの抽出（SELECT)、追加（INSERT)、
                                 更新 (UPDATE)、削除 (DELETE)

・データ定義言語（DDL)：データベースやテーブルなどを定義する言語。
        Definition      データベース管理者以外の使用では、開発者がテスト
                        ケースとしてデータを用意する際に使用する。
        代表的な命令  ・テーブルなどの作成（CREATE)、変更（ALTER)
                                      削除（DROP）←※DELETEではない！

・データ制御言語（DCL)：データ操作を制御する言語。
        Control         開発者の使用例としては、主にアプリ内で間接的に
                        使用するなど、直接の使用は少なく、書籍に依っては
                        取り扱われていない場合もある。
        代表的な命令  ・ユーザーに使用権原を付与（GRANT)   、剥奪（REVOKE)
                      ・トランザクション処理を確定（COMMIT)、取消（ROLLBACK)
                          ↑データ操作の一連の流れの単位[第11章]

3-2 データの抽出（SELECT文）

【基本形】
  A SELECT カラム名 FROM テーブル名;             ←カラムの絞り込み
  B SELECT カラム名 FROM テーブル名 WHERE 条件式;←レコードの絞り込み
 
  ①カラムの指定
    複数のカラムを表示させたい場合は、カンマで区切って列挙する。
    テーブルのすべてのカラムを表示させたい場合は、*を利用する。

  ②条件式
    比較演算子、論理演算子は第5章で取り扱う。
    対象を絞り込むためのWHERE句は、他のデータ操作言語でも使用できる。
    →とくに、更新、削除の操作では、WHERE句の記述漏れは事故になるので要注意！

【確認】
 [リスト3-4]
  SELECT * FROM jusyo;
 [リスト3-5] 指定した列順→抽出される列順
  SELECT company, idju, state, address, sip, tel FROM jusho;
 [リスト3-7]
  SELECT * FROM jusho WHERE state='東京都';


3-3 データの追加（INSERT文）

【基本形】                                     イメージ
  INSERT INTO テーブル名（カラム名リスト）   ←仮引数
  VALUES（カラムに対応する設定値リスト）;    ←実引数
  
  ①リスト数
    カラム名および設定値のリストは、カンマで区切って列挙する。
  
  ②リスト順
    カラム名のリスト順と設定値のリスト順を合わせることで、設定値を追加する
    カラム名を指定することになる。
    ※両社の順番を合わせないと、カラム名と対応しない値が設定されたり、
      データ型が合わないと操作エラーになったりする！

  ※ちなみに、複数のレコードを追加したい場合、
    レコードの数だけINSERT文を発行する必要がある。→[工夫]Excel活用例 p.075

【確認】
 [リスト3-11]（追加）
  INSERT INTO jusho(idju, company, state, address, zip tel)
  VALUES(1234, 'チキュウ社', '東京都' '世田谷区桜丘', '156-0054', '03-2234-5567');
    ↓
 [リスト3-12]（確認）
  SELECT * FROM jusho;


3-4 データの更新（UPDATE文）

【基本形】
  UPDATE テーブル名
  SET カラム名1=更新したい値1,    ←更新したい値が複数ある場合は、
      カラム名2=更新したい値2       カンマで区切って列挙する！
  WHERE レコードを絞り込む条件式; ←必須！
            ↑
  ※更新するレコードを絞り込む必要がある！
    WHERE句がないと、すべてのレコードのカラムの値値が更新されてしまう！

【確認】
 [リスト3-15]（更新）
  UPDATE jusho
  SET address='世田谷区太子堂', zip='156-0044'
  WHERE idju=1234;
    ↓
  [リスト3-16]（確認）
   SELECT * FROM jusho;


3-5 データの削除（DELETE文）