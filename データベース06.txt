Chapter06 関数

6-1 関数とは
    ↑
   演算よりも複雑なりょりを可能にする機能
   →値を指定すると、組み込まれている処理が実施され、処理結果を戻す（返す）。
       ↑                                                  ↑
     入力値：引数                                    出力値：戻り値
     ・1つの場合もあればカンマで区切って
       複数指定する場合もある。
     ・逆に、1つも指定しない場合もある。

   →関数は値を戻すため、SQL文のリテラルを指定できる場所で使用する。

【関数の種類】
  データ型（数値型、文字列型、日時型）の場合と同様、3種類に大別できる。
  ①数値関数    ：数  値を扱う関数→演算、乱数、桁揃え など
  ②文字列関数  ：文字列を扱う関数→変換、置換、抽出、連結、分割 など
  ③日時関数    ：日  時を扱う関数→現在の日時の取得、日時差の計算 など
  ④その他の関数：データ型の変換など、上記に分類されない関数


6-2 数値関数

【関数の種類】
  ①数値を操作する関数
    用途：桁をそろえる
    代表的な関数）・小数点以下の数値を処理して整数値を求める。
                    ★FLOOR   関数：負の方向で整数になるように処理する
                    ★CEILING 関数：正の方向で整数になるように処理する
                  ・処理する桁数を指定できる。
                    ★ROUND   関数

  ②指数・対数を計算する関数[使用頻度：低、数学・物理分野で使用]
    代表的な関数）・SQRT 関数：平方根
                  ・POWER関数：べき乗

  ③三角関数を計算する関数  [使用頻度：低、物理分野、とくに電機分野で使用]
    比較的使用頻度のある関数）・PI関数：円周率の値を返す

  ④その他の数値関数
    代表的な関数）★RAND関数：乱数
                  ・ABS 関数：絶対値

---★印のある関数の紹介---

★FLOOR  関数：負の方向で『整数』になるように処理する 床（負）
★CEILING関数：正の方向で『整数』になるように処理する 天井(正）

・小数点以下の数値を処理する方向
CRILING（天井）
   正     【確認】
   ↑       ・CEILING関数：正の方向に切り上げ    結果
   ｜        [リスト6-2] SELECT CEILING( 1.23);← 2
   ０        [リスト6-3] SELECT CEILING(-1.23);←-1
   ｜
   ↓       ・FLOOR 関数：負の方向に切り捨て
   負        [リスト6-4] SELECT FLOOR( 1.23);  ← 1
 FLOOR（床） [リスト6-5] SELECT FLOOR(-1.23);  ←-2

★ROUND関数：処理対象の桁数を指定することができる。

 [構文] ROUND（引数1 [,引数2]）
        引数1：対象となる数値
        引数2：求めたい桁数をS鄭
               →処理対象の桁数は、引数2で指定した桁数の1つしたの桁数になる。
               ・正の値で指定）小数点以下の桁数
               ・負の値で指定）1の位を0とし、負の値が増えると位が増える。
                              [例] -1を指定→10の位まで求める
                                   -2を指定→100のくらいまで求める。
               ・引数2は省略可能で、省略した場合は整数を求める。
                (引数2に0を指定した場合と同じ処理内容になる。）
【確認】
 [リスト6-7] SELECT ROUND(1.23);            [リスト6-8] SELECT ROUND(1.53);
             SELECT ROUND(1.23,0);                      SELECT ROUND(1.53, 0);

 [リスト6-9] SELECT ROUND(1.2345, 2);       [リスト6-10]SELECT ROUND(12345,-3);
 
 [リスト6-11]SELECT * ROUND(charge,-4) FROM uriage;

★RAND関数：乱数を生成する関数
× [P.147] 0以上1以下のランダムな値
〇 [公式]  0<=1x<1 の範囲内で、ランダムな浮動小数点値xを返す
    → https://dev.mysql.com/doc/refman/5.6/ja/mathematical-functions.html

 [構文] RAND()
            ↑
        Javaと同様に、引数は不要でも()は必須！
        逆に、省略可能な言語もある（例] Excel VBA)

 [整数乱数の発生]（キャストの代わりに切り捨て関数を用いる
  ・FLOOR (RAND () * 【設定値】）;
    →設定値に10を入れると0～9の乱数が発生する。
      つまり、最大値は、設定値-1となる。
      したがって、
      i<=R<=jの範囲で整数乱数Rを取得するには、
       FLOOR (RAND()*(j-i+1)+i)
       
      を使用する。
    ※[p.148]の式[図6-12]は、開始の値以上終了の値未満になる！


6-3 文字列関数

用途）データベースから取得した値（文字列）を加工して表示する際に利用される。

【関数の種類】
  ①連結や置換する    関数：連  結）CONCAT関数、     置    換）REPLACE関数
  ②長さを求める。    関数：文字列）CHAR_LENGTH関数、バイト数）LENGTH関数
                                      ↑                         ↑
                                     半角も全角も           文字コードによって
                                     同じ1文字！            結果が異なる！
  ③部分抽出や補填する関数：抽    出）[左端] LEFT関数、 [右端] RIGHT関数
                                      [指定] SUBSTRING関数、MID関数
                            空白除去）[両端]  TRIM関数
                                      [左端] LTRIM関数、[右端] RTRIM関数
                            文字補填）[左端] LPAD関数、 [右端] RPAD関数
  ④変換              関数：小 文 字）LOWER関数、  大文字）UPPER関数
                            数値書式）FORMAT関数
  -------------------------
 [使用頻度：低]
  ⑤検索              関数：[p.151]表6-10
  ⑥その他の          関数：[p.151]表6-11

---代表的な関数の紹介---

★CONCAT関数：文字列を連結する関数
 [構文]
  CONCAT（連結させたい『文字列』のリスト）
                          ↑        ↑
                    数値も        カンマ区切りで列挙
                    自動型変換で
                    連結の対象になる！
【確認】                                               結果
 [図6-13] SELECT CONCAT('リンゴ','ミカン', 'バナナ');→リンゴミカンバナナ
 [数値]   SELECT CONCAT(2022,'/',02,'/',02);         →2022/ 2/ 2
          SELECT CONCAT(2022,'/','02','/','02');     →2022/02/02
 [真偽値] SELECT CONCAT(true,false);                 →10
    ↑
※MySQLでは数値型（true:1,false:0)として扱われる！

 [リスト6-14]SELECT * , CONCAT(state,address) FROM jusho; →[図6-15]

★REPLACE関数：ある文字列を別の文字列で置換する関数
 [構文]
  REPLACE（対象となる文字列,置換前の文字列,置換後の文字列)

【確認】
 [図6-16] SELECT REPLACE('リンゴミカンバナナ','ミカン','マスカット');
          SELECT REPLACE(company,'社','') FROM jusho;
                        カラム指定OK  ↑
                                 空文字を指定すると対象文字列を除去できる

★LOWER/UPPER関数：小文字/大文字に置換する（揃える）関数
 [構文]
  LOWER/UPPER（対象となる英単語）

  ※対象となる英単語が全角、半角にかかわらず、置換可能！

【確認】SELECT LOWER('ABC');      SELECT LOWER('AbC');
        SELECT LOWER('ＡＢＣ');   SELECT LOWER('ＡbＣ);

        SELECT UPPER('xyz');      SELECT UPPER('XyZ');
        SELECT UPPER('ｘｙｚ');    SELECT UPPER('ＸyＺ');

★CHAR_LENGTH関数：文字列の長さ[文字数/バイト数]を調べる関数
 [構文]
  CHAR_LENGTH('対象となる文字列')：文 字 数（半角・全角の区別なし）
       LENGTH('対象となる文字列')：バイト数（文字コードに依存する）

 [参考] 文字コードの文字の長さ（バイト数）
  -----------------------------------------------------
  文字コード｜半角英数字｜半角カタカナ｜全角（日本語）
  -----------------------------------------------------
  Shift-JIS ｜    1     ｜      1     ｜ 2
  UTF-8     ｜    1     ｜      3     ｜ 3
  -----------------------------------------------------
                                  
【確認】SELECT CHAR_LENGTH('flower');←6 SELECT LENGTH('flower');←6
        SELECT CHAR_LENGTH('あいう');←3 SELECT LENGTH('あいう');←9

★LEFT/RIGHT/SUBSTRING(MID)関数：部分的な文字列を抽出する関数
 [構文]
  LEFT/RIGHT（対象となる文字列、取り出す文字数）
  左端/右端                               ↑
     ↑（指定）                    全角、半角の区別なし
  開始位置
     ↓（任意）
  SUBSTRING/MID（第1引数,第2引数,第3引数）
              → 第一引数：対象となる文字列
              → 第2引数：抽出開始位置（0からではなく、1から数える）
                          ※負の値を指定すると、右端から数える！
              → 第3引数：取り出す文字数
                          ※ 省略すると、末尾まで取り出す！

【確認】                                        抽出文字列
 [図6-17] SELECT LEFT ('あいうえお',3);        →あいう
          SELECT RIGHT('あいうえお',3);        →うえお
 [図6-18] SELECT SUBSTRING('あいうえお', 2,3); →いうえ
          SELECT SUBSTRING('あいうえお',-3,3); →うえお
          SELECT SUBSTRING('あいうえお', 2);   →いうえお

★（L/R）PAD関数：文字数をそろえるために文字列を補填する関数
 [構文]
 (L/R) PAD（第1引数,第2引数,第3引数）
  ↑      →第1引数：対象となる文字列
開始位置  →第2引数：補填後の全文字数
          →第3引数：補填文字列

【確認】SELECT LPAD('鈴木一郎',10,'*');     →******鈴木一郎
        SELECT RPAD('鈴木一郎',10,'*');     →鈴木一郎******

  ※補填後の全文字数を対象文字列より小さい数値で設定すると指定の文字数に
    丸められることになる！→文字列が削られることになる！
   【確認】SELET LPAD('鈴木一郎',3,'*');    →鈴木一

  ※両端を補填する関数は用意されていない（×PAD関数）ので、工夫する！
   【確認】SELECT LPAD(RPAD('鈴木一郎',10,'<'),16'>');
                                            →>>>>>>鈴木一郎<<<<<<

★FORMAT関数：数値の表示形式を設定する関数
 [構文]
  FORMAT（対象となる数値,小数点以下の桁数)
                    ↑
          カンマ区切りで表示

【確認】SELECT FORMAT(12332.123456,4); →12,332.1235
        SELECT FORMAT(12332.1,     4); →12,332.1000
        SELECT FORMAT(12332.2,     0); →12,332


6-4 日付および時間関数

用途）データベースから取得した日時を加工して利用する際に使用する。

【関数の種類】
  ①現在の日時情報を取得する    関数：CURRENT_DATE、CURRENT_TIMESTAMP関数
                                      ※ 世界標準時間で取得する関数もある。
                                      → 9時間前の情報として取得される！
  ②日時の各構成要素を取り出す  関数：YEAR、MONTH、DAY関数
                                      年    月     日
  ③日時の計算に使用するための  関数：DATE_ADD、   DTE_SUB関数
                                      指定日時後   後
                                      DATEIFF、 TIMESTAMPDIFF関数
                                      日時間の差
  ④特定情報や表示方法を変換する関数：DATE、       TIMESTAMP関数
                                      日付の取得   日時情報に表示変換

---代表的な関数の紹介---

★現在の日時と表示関数
→他のDBMSとの互換性などの理由で様々な名前の関数があるが、種類としては3種類！

・現在の日付：CURRENT_DATE()        SELECT CURRENT_DATE();
・現在の時刻：CURRENT_TIME()        SELECT CURRENT_TIME();
・現在の日時：CURRENT_TIMESTAMP()   SELECT CURRENT_TIMESTAMP();

※端末情報から取得するので、引数は必要としない！
          ↓
  端末の日時がくるっていると、間違った日時が返るので、要注意！

★部分的な日時取得関数
                         【確認】                         数値型
  年）YEAR  （指定日付）   SELECT YEAR  ('2020-02-02'); → 2020
  月）MONTH  (指定日付)    SELECT MONTH ('2020-02-02'); →  2(×02)
  日）DAY    (指定日付)    SELECT DAY   ('2020-02-02'); →  2(×02）
  時）HOUR   (指定時間）   SELECT HOUR  ('20:02:22');   → 20
  分）MINUTE (指定時間）   SELECT MINUTE('20:02:22');   →  2(×02)
  秒）SECOND (指定時間）   SELECT SECOND('20:02:22');   → 22

  曜日）WEEKDAY（指定日時）DAYNAME（指定日時）
月曜日    ０               Monday
  ・      ・                 ・
  ・      ・                 ・
日曜日    ６               Sunday

【確認】SELECT WEEKDAY('2020-02-02');   SELECT DAYNAME('2020-02-02');
        →6                             →Sunday

★日時を計算にし応する関数
①DATE_ADD/DATE_SUB関数：指定した日時以降/以前を取得する関数
 [構文]
  DATE_ADD/DATE_SUB ('基準とする日時',INTERVAL 数量 単位)
  
  ※数量を指定するデータ型に注意！
    〇文字列型
    ×数 値 型（自動型変換されるので、動作はするが、誤動作に注意！）

【確認】
 [図6-20] SELECT DATE_ADD('2017-09-25 06:45:15',INTERVAL 1 DAY);
          SELECT DATE_ADD('2017-09-25 06:45:15',INTERVAL '1' DAY);
          SELECT DATE_ADD('2017-09-25 06:45:15',INTERVAL 15 MINUTE);
          SELECT DATE_ADD('2017-09-25 06:45:15',INTERVAL '15' MINUTE);
   [追加] SELECT DATE_ADD('2017-09-25 06:45:15',INTERVAL '1 0:15' DAY_MINUTE);
          ※追加のような記述が出来なくなるため、['']はつけておこう！

②-1 DTEDIFF/TIMEDIF  （'対象とする日時','基準となる日時')
②-2 TAIMESTAMPDIFF（単位,'基準となる日時','対象とする日時')

※どちらも日時の差を求める関数だが、『対象とする日時』と『基準となる日時』の
  指定の順番が異なる点に注意！

※単位は、②-1の関数は関数名で、②-2の関数は第一引数で指定する。
                                              ↑
                                      [P.164]表6-19の左側（×右側）

【確認】
 [図6-21] SELECT DATEDIFF('2017-09-25','2017-09-01');
          SELECT TIMEDIFF('2017-10-01 06:45:15', '2017-09-28 03:22:10');
 [図6-22] SELECT TIMESTAMPDIFF(DAY,'2017-09-01', '2017-09-25');
  SELECT TIMESTAMPDIFF(MINUTE,'2017-09-28 03:22:10','2017-10-01 06:45:15');

★表示形式を指定する関数
 [構文]
  DATE_FORMAT('対象とする日時','書式文字列')

  ※書式文字列に使用する日時の各構成要素は『指定子』を使用する
                                          →P.166

【確認】
 [リスト6-29]
  SELECT DATE_FORMAT('2017-09-25','%Y年%m月%d日);
  SELECT DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y年%m月%d日');


6-5 列の別名

通常、計算式や関数などを使用した結果票の列には、式と同じ名前が使用される。
式の名前がカラム名の場合、どのようなデータを取り扱っているカラムか、
わかりにくい場合がある。
→カラム名に任意の別名を付けるには、ASキーワードを使用する。

【確認】
 [リスト6-30] SELECT *, ROUND(charge,-4)                FROM uriage;
 [リスト6-31] SELECT *, ROUND(charge,-4)AS uriagegaisan FROM uriage;

              SELECT *, ROUND(charge,-4)AS 売上概算     FROM uriage;


6-6 その他の主な関数

★比較的使用頻度のある返還関数
  MySQLにはデータの型が異なっていても自動的に型変換する機能が備わっている。
  しかし、『自動的』なので型変換が果たらなかったり、思い通りに型変換されない
  場合もある。
  →明示的に型を変換する関数：CAST関数、CONVERT関数

 [構文] CAST    (変換したい値 AS 変換したい型)   ※変換可能な主なデータ型
        CONVERT (変換したい値,   変換したい型)    [P.170]表6-22
          ↑
        文字コードの変換にも利用できる！
        CONVERT(変換したい値 USING 文字コード)   ※指定可能な主な文字コード
                                                   [P.170]表6-23

【確認】
☆型変換
① SELECT 3/2; → 1.5000と評価され、1時間5000分として処理される
   SELECT DATE_ADD('2017-09-25 06:45:15',INTERVAL 3/2 HOUR_MINUTE);
                → '2017-09-28 19:05:15'

② SELECT CAST(3/2 AS DECIMAL(3,1));  → 1.5と評価され、1時間5分と処理される
   SELECT DATE_ADD('2017-09-25 06:45:15',
   INTERVAL CAST(3/2 AS DECIMAL(3,1))HOUR_MINUTE);→'2017-09-25 07:50:15'
   日時に日時を足すイメージ

☆ 文字コード変換                             文字列の長さ（バイト数)
   SELECT LENGTH('あいう');                     →9(UTF-8)
   SELECT LENGTH(CONVERT('あいう' USING SJIS)); →6(Shift-JIS)

☆上記以外の変換例
  バイナリ文字列には文字コードがなく、大文字と小文字の区別の概念もない。
  この場合、CONVERT関数を使用して、テキスト文字列に変換し、比較などを行う

  SELECT LOWER(CAST('Tokyo' AS BINARY)),
  LOWER(CONVERT(CAST('Tokyo' AS BINARY) USING utf8));
                                バイナリ型（バイナリデータをそのまま格納）


6-7 関数を利用したデータの絞り込み

関数は、SQL文の中でリテラル値を使用する場所で利用できる。
→SELECT句以外にもWHERE句でレコードの絞り込みにも利用できる！

【確認】
 [図6-26] 2017年の売上日のデータを抽出
          SELECT * FROM URIAGE
          WHERE salesdate BETWEEN '2017-01-01' AND '2017-12-31'; ←演算子
                          以上以下

          SELECT * FROM uriage
          WHERE YEAR(salesdate) = 2017;                          ←関数

 [図6-27] 本日から30日以前のデータを抽出
          SELECT * FROM uriage
          WHERE salesdate <= DATE_SUB(CURRENT_DATE(),INTERVAL 30 DAY);

