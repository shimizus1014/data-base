Chapter12 ストアドルーチン

12-1 ストアドルーチン

一連のSQL文をデータベースに登録しておく仕組み
→複数のSQL文を使用するごとに記述する手間を省くことができる。

【ストアドルーチンの種類】2種類
  ①ストアドプロシージャ  ：Excel VBAのSubプロシージャに相当
    →戻り値なし
    →利用するときは、CALL文を呼ぶ。

  ②ストアドファンクション：Excel VBAのFunctionプロシージャに相当
    →戻り値あり
    →SQL文で使用できる関数と同じ取り扱いができる。

【①ストアドプロシージャ】
  vs トランザクション
 [共通点] 複数のSQL文をまとめて取り扱う。
 [相違点] トランザクションの処理は、All or Nothing（原子性）である。
          一方、
          ストアドプロシージャは、仕込まれているSQL文が順次実行され、
          エラーが発生してもその前の処理は結果として残る。

【登録】
 [構文]
  DELIMITER // ←デリミタの指定（既存のままだと;になっている）

  CREATE PROCEDURE プロシージャ名(引数リスト）
  BEGIN
    登録したい複数のSQL文
  END //

 [DELIMITER ;] ←通常の区切り文字に戻す（コマンド操作の場合）
                 ※phpMyAdminの場合、実行ボタンをクリックすると、
                   データベースに接続→実行→切断されるので、
                   この記述は不要！

【実行】
  ・CALL文で呼び出す。
    CALL プロシージャ(引数リスト);

【削除】
 [構文]
  DROP PROCEDURE プロシージャ名;

【確認】
 [リスト12-6]登録
  DELIMITER //
  CREATE PROCEDURE uriagepack()
  BEGIN
    INSERT INTO shohin(idsh,product,price,category)
    VALUES('ML32004','万年筆D',3000,'万年筆');
    INSERT INTO uriage(idur,company,charge,state,area)
    VALUES(2017120001,'シリウス社',6000,'東京都','世田谷区');
    INSERT INTO uriage(idur,company,charge,state,area)
    VALUES(2017120002,'ベガ社',12000,'東京都','世田谷区');
  END //

 [リスト12-7] 実行
  CALL uriagepack();

 [リスト12-8、12-9]確認
  SELECT * FROM shohin;
  SELECT * FROM uriage;

【引数の利用】
 [仮引数の定義] 仮引数名 データ型←[参考] Excel VBA：仮引数名 AS データ型

【確認】
 [図12-10] 登録
  DELIMITER //
  CREATE PROCEDURE uriagekaishabetsu(kaisha VARCHAR(50))
  BEGIN
  	SELECT * FROM uriag WHERE company=kaisha;
  END //

 [リスト12-11] 実行
  CALL uriagekaishabetsu('シリウス社');


【②ストアドファンクション】
【登録】
 [構文]
  DELIMITER //
  
  CREATE FUNCTION ファンクション名（引数リスト）RETURNS 戻り値の型
  BEGIN
   [DECLARE 変数名 データ型;]※変数宣言
    登録したいSQL文
   [SELECT 処理結果 INTO 変数名 FROM ～;] ※変数に処理結果の値を格納
    RETURN 戻り値;
  END //

【実行】
  ・関数を利用できる場所と同じ場所に記述できる。
   [例] SELECT ファンクション名（引数リスト);

【削除】
 [構文]
  DROP FUNCTION ファンクション名;

12-2 トリガー
      ↑
テーブルに対して更新処理が行われた時、その処理をきっかけにして
他のテーブルにも更新処理を行う機能

【登録】
 [構文]
  DELIMITER //
  
  CREATE TRIGGER トリガー名 BEFORE/AFTER 対象の操作
                            ①タイミング ②イベント
  ON テーブル名 FOR EACH ROW
                ③決まり文句
  BEGIN
    実行したいSQL文;
  END //

 [DELIMITER ;]              ←コマンド操作には必要！
                              phpMyAdmin  では不要！

  →①タイミング：トリガーを発生させるタイミング
                  イベントの発生前：BEFORE、発生後：AFTER
  →②イベント  ：更新処理
                  挿入：INSERT、更新：UPDATE、削除：DELETE
  →③決まり文句：レコード単位でトリガーを発動させる。指定必須！

【削除】
  DROP TRIGGER トリガー名;

【確認】
 [リスト12-23]登録
  DELIMITER //
  CREATE TRIGGER jushotrigger AFTER DELETE ON jusho FOR EACH ROW
  BEGIN
    UPDATE uriage SET charge = 0 WHERE company = OLD.company;
  END //
  
  ※ UPDATE文では、「OLD」、「NEW」キーワードで指定することで更新される
     データの変更前後の値を取得することができる。
     OLD,NEWのそれぞれの参照元は、トリガー条件で変更があったレコードの
     カラムを参照する。そのためデリーとのNEWや、インサートのOLDは使えない！
  
          意味                    INSERT         UPDATE      DELETE
 ----------------------------------------------------------------------
 NEW  トリガー実行時の新しい値   〇使える       〇使える    ×使えない
 OLD  トリガー実行時の古い  値   ×使えない     〇使える    〇使える
 -----------------------------------------------------------------------

 [リスト12-24] 実行
  ① DELETE FROM jusho WHERE company = 'ベガ社'; →売上テーブルのベガ社が含まれるレコードに変化が！
  ② DELETE FROM jusho WHERE state   = '北海道';

 [リスト12-25] 確認
  ① SELECT * FROM uriage WHERE company = 'ベガ社';
  ② SELECT * FROM uriage WHERE state   = '北海道';