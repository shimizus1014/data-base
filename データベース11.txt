Chapter11 トランザクションとロック

11-1 トランザクション
         ↑                                             ACID特性[p.265]
切り離せな複数のSQL文をまとめて実行するための仕組み     ①原子性
                                                        ②一貫性
 [例]銀行の振込処理、在庫管理処理など                   ③分離性→[11→3節]
     →データの不整合が許されない処理（②一貫性）
    [例]口座から引き落とされたのに、振り込まれなかった！？
        商品を出庫したのに、在庫数に変化なし！？

データの不整合を許さない操作：すべて実行された、
                              すべて実行されていない、
                              のいずれかの操作になる（①原子性）
                                                        ↑
                              密接に関連する複数の処理が外部から一つの操作に見える

トランザクションの開始] START TRASACTION; ←SQL文の実行前に記述！
                   ↑          ↓
                   ↑      SQL文を実行    ←データベースからの読み込み
                   ↑          ↓
                   ↑      SQL文を実行    ←データベースへの仮書き出し
                   ↑          ↓
トランザクションの終了] ★ ROLLBACK;      ←①処理の取消（データを元に戻す）
                        ★ COMMIT;        ←①処理の確定（仮書き出しを確定）
                                               ↑
                                            処理結果がデータベースに
                                            きちんと反映される（④永続性）。

【確認】在庫管理処理の例
  ※管理者権限でログイン（root、rbpass）し直してから、確認作業すること！
 [リスト11-2] INSERT INTO zaiko(idzai,product,stck)
              VALUES(8001,'ペンケース赤',100);     ←在庫数100個

 [リスト11-5] START TRANSACTION;
              INSERT INTO syukko(idko,taiou,outnum,outdate)
              VALUES(2017090001,8001,30,'2017/09/25');  ←30個出庫
              UPDATE zaiko SET stock=stock-30           ←出庫数30こ減
              WHERE idzai=8001;
            ①ROLLBACK;                 ←操作取消でトランザクション終了
            ②COMMIT;                   ←操作確定でトランザクション終了

※本来の作業としては、更新作業（INSERT、UPDATE、DELETE文）を実施した後、
  SELECT文で確認する作業を実施し、更新作業の成否を確認する。
  ・更新作業が問題なく完遂すRば、COMMITする。
  ・更新作業に問題が発生すれば、ROLLBACKする。

  phpMyAdminのSQL文を実行する機能は、フォームからSQL文を投稿するたびに、
  「接続」→「実行」→「切断」を繰り返す仕様であるため、リスト11-5のように、
  一括入力して、最終結果を確認する方法しか取れない。
  あくまで補助機能であり、単文実行専用で使用すること。