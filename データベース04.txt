Chapter04 データ型

4-1 データ型とは

    データ型：カラムに格納するデータの種類
      ↑
 ※テーブル作成時にデータ型と長さを設定する。←データ定義言語の操作で取り扱う
   →データベース運用後で変更は基本的にできない！
    （アプリなどの仕様に影響が及ぶため）

 ※1つのカラムに定義できるデータ型は1つのみ。
  （Excelのセルのように、文字列も数値も格納することはできない！）

【データ型の種類】
 ①数値方
  おもに、整数、少数の2種類。
  さらに、桁数や精度により、分類される。
  リテラルは、原則、引用符で囲まない！

 ②日時型
   実用的でない年月日時分秒の値は格納できない（[例]13月や32日 など）。
   おもに、管理は日時を格納するデータ型で設定し、
           関数を使用して、年・月・日・時・分・秒をそれぞれ取り出す使用が多い。
   リテラルは、原則、引用符で囲む！

 ③文字列型
   おもに、テキストデータとバイナリデータの2種類。
   データ数やデータ長の指定の有無により、分類される。
   日時型の場合と同様、関数を使用して加工・編集される使用が多い。
   リテラルは、原則、引用符で囲む！

 ④その他（空間データ）
   特殊な使用であり、今回は紹介のみで、取り扱わない！

【データ型の決め方】
 ①データ型には、標準SQLで指定されているデータ型と
                        各DMBS固有のデータ型がある。
   他のDBMSとの互換性を考慮する場合、標準SQLで指定されているデータ型を
   採用するとよい。

 ②数値を使用しているデータを格納するデータ型については、下記を考慮して決める。
   A 計算に使用するデータか否か？
     数値方は、値のみ保存されるため、電話番号や郵便番号のように先頭に0のある
     データが含まれる場合、先頭の0は取り扱われない。

   B 大小比較の対象となるデータか否か？
     文字列型は、先頭の文字から1文字ずつ比較する。そのため、桁数が少なくても
     先頭のスチガ大きければ、大きなデータと判断される。
     ちなみに、
     文字列型の比較基準は文字コードの値であるため、漢字の比較には注意が必要！


4-2 数値型

・整数
  扱う桁数の大きさで、Javaの場合と同様、複数のデータ型が用意されている。
  通常は、Javaと同様、INT型を採用すればよい。
 (Excel VBAのInteger型とは異なり、Javaと同様、約±21億まで取り扱うことができる。
 
  また、UNSIGNEDオプションを使用することで、府の範囲を正の範囲に移行させて
  取り扱うこともできる。
 [例]TINYINT）オプションなし：-128～127
       ↑     オプションあり：   0～255
  Javaのbyte型に相当

・少数
  固定少数型：小数点の位置を固定して通り扱うデータ型
         [例] 整数部分を5桁、小数部分も5桁にきめておく。
              3.1415という数値であれば、00003.14150と表される。
              整数部分を5桁にそろえるために、先頭に0を補って00003とし、
              小数部分も5桁にそろえるために、末尾に0を補って14150とする。
              
              小数点の場所を固定しているため、小数点を記録する必要はない！
              つまり、0000314150と表してもよい。
              このように、小数点を省略して扱うことが可能になる。

  固定少数点型は、数値の制度を必要とする計算には適さない。
  上記の例と同様、整数部5桁、小数部5桁で表記するとして、3.14159265を表現
  したいとする。
  9桁の数値だが、小数部が長いので、00003.14159にしか表現できない。
  下の3桁は捨てるしかない一方で、整数部には5桁を扱えるのに先頭の4桁は0で
  埋められていて無駄になっている。
    ↓
  そこで、小数点の位置をずらせるようにしよう、という考えが登場してきた。
    ↓
  浮動小数型：小数点の位置を固定しないで取り扱うデータ型
         [例] 299800000㎧は、2.998*10^8㎧と記述することができる。
         
         上記に相当する表現をコンピュータでも採用しよう、という考えが
         浮動小数点型の考え方である。
         ただし、コンピュータでは、通常2進数で計算するので、
                           a.bb*2^c
         という形で表現する。


4-3 日付と時刻型

※一般的に、管理するデータ型は日時型になる。
→日付のみ、時刻のみ、年のみのデータ型もあるが、使用時に関数にて構成要素を
  取り出すことができるため、日時型で管理する。
                            ↓
  ※保存できる機関により、2種類がある。
  ①DATETIME （1000年～9999年）
  ②TIMESTAMP（1970年～2038年）
    →時刻をグリニッジ標準時に変換して保存するため、地域別の時間差を
      考慮したい場合は、こちらの型を採択する。

【表記】
  ①リテラルは、引用符で囲む。
  ②日付や時刻は、区切り文字で区切って表記することもできるし、
                  区切り文字を使用せずに表記することもできる。←桁数に注意！

    代表的な区切り文字）日付：ハイフン（-）、スラッシュ(/)
                        時刻：コロン（:）
  ※日付と時刻の間の区切り文字として、「スペース」のほか、「T」も使用可能。
   [例]'2017-09-15T12:32:07'


4-4 文字列型

・テキストデータを扱うデータ型
                →人が読める文字列情報
                  アプリに依存せずに読み込むことができる文字列データ

            文字数 最大文字数
  ----------------------------
     CHAR型 固定長    255文字
  VARCHAR型 可変長 65,535文字←通常、使用するデータ型
     TEXT型 可変長   制限なし

・バイナリデータを扱うデータ型
                 →人が読めない文字列情報
                   アプリに依存して、読み込むことができる文字列データ
                  [例]画像データ、動画データ など

         バイト数 最大バイト数
  -------------------------------
    BINARY型 固定長   255バイト
 VARBINARY型 可変長65,535バイト
      BLOB型 可変長    制限なし

【表記】
 ①リテラルは、引用符で囲む。
   →二重引用符も使用可能だが、他のDBMSとの互換性が懸念される。

 ②エスケープシーケンスも使用可能
   ↑バックスラッシュと特定の1文字との組み合わせで、特別な役割をもつ文字
    [例]\n：改行、\t：タブ文字 など

【補遺】※文字列に引用符を含める方法
  A「'」で囲んだ文字列内で「'」を使用する場合は、「''」と記述する。
  B「"」で囲んだ文字列内で「"」を使用する場合は、「""」と記述する。
  C 引用符文字の直前にエスケープ文字「\」を指定する。
  D「"」で囲んだ文字列内で「'」を使用する場合、
    ・引用符を2つ続けて入力したり、
    ・エスケープしたりなどの特別な処理は必要はない。
    同様に、「'」で囲んだ文字列内で「"」を使用する場合も、特別な処理は
    必要ない。

 [確認]（動作確認は、SELECT句のみ使用する）
 SELECT 'topia','''topia''','"topia"','""topia""','top''ia','\'topia';
          通常     Aの例      Dの例      Dの例     Aの例       Cの例

4-5 NULLという特別な値
     ↑
  値を何も設定していない、ことを意味する値
  →未設定や未確定の状況のときに使用する。
  ※文字列型ではないので、引用符では囲まない！